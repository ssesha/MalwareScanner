package com.cs5231.scandroid;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.security.DigestInputStream;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.List;

import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.ResolveInfo;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.ListView;
import android.widget.Toast;

import com.actionbarsherlock.app.SherlockListActivity;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuItem;
import com.actionbarsherlock.view.MenuItem.OnMenuItemClickListener;
import com.actionbarsherlock.view.Window;

public class HomeActivity extends SherlockListActivity {
	MenuItem scan;
	Context cont;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_home);
		setSupportProgressBarIndeterminateVisibility(false);
		cont = this;
		//ScanTask scanTask = new ScanTask(this);
		//scanTask.execute();
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getSupportMenuInflater().inflate(R.menu.home, menu);
		scan = (MenuItem) menu.findItem(R.id.scan);
		scan.setOnMenuItemClickListener(new OnMenuItemClickListener() {
			public boolean onMenuItemClick(MenuItem item) {
				AlertDialog.Builder builder = new AlertDialog.Builder(cont);
				builder.setCancelable(true);
				builder.setTitle("Scan APKs");
				builder.setMessage("Are you sure you want to scan APKs on this phone for Malware?");
				builder.setInverseBackgroundForced(true);
				builder.setPositiveButton("Yes",
						new DialogInterface.OnClickListener() {
							@Override
							public void onClick(DialogInterface dialog,
									int which) {
								ScanTask scanTask = new ScanTask(cont);
								scanTask.execute();
							}
						});
				builder.setNegativeButton("No",
						new DialogInterface.OnClickListener() {
							@Override
							public void onClick(DialogInterface dialog,
									int which) {
								dialog.dismiss();
							}
						});
				AlertDialog alert = builder.create();
				alert.show();
				return false;
			}
		});
		return super.onCreateOptionsMenu(menu);
	}
	
	@Override
	protected void onListItemClick(ListView l, View v, int position, long id) {
		super.onListItemClick(l, v, position, id);
		Object obj = getListAdapter().getItem(position);
		if(obj instanceof AppUnit){
			AppUnit au = (AppUnit) obj;
			if(au.isMalware()){
				Toast.makeText(this, au.getAppHash(), Toast.LENGTH_SHORT).show();
				Intent intent = new Intent(Intent.ACTION_DELETE, Uri.fromParts("package",
						getPackageManager().getPackageArchiveInfo(au.getAppPath(), 0).packageName,null));
				startActivity(intent);
			}
		}
	}
	
	public class ScanTask extends AsyncTask<Void, Void, Integer> {
		Context cont;
		ArrayList<AppUnit> appList;
		public ScanTask(Context cont){
			this.cont = cont;
			this.appList = new ArrayList<AppUnit>();
		}
		@Override
		protected void onPreExecute() {
			Log.d("lala", "started");
			scan.setVisible(false);
			getSupportActionBar();
			setSupportProgressBarIndeterminateVisibility(true);
		}
		
		@Override
		protected Integer doInBackground(Void... params) {
			int result = 0;
			final Intent mainIntent = new Intent(Intent.ACTION_MAIN, null);
			mainIntent.addCategory(Intent.CATEGORY_LAUNCHER);
			final List pkgAppsList = getPackageManager().queryIntentActivities(
					mainIntent, 0);
			
			DataBaseHelper myDbHelper = new DataBaseHelper(cont);
			try {
				myDbHelper.createDataBase();
			} catch (IOException e) {
				throw new Error("Unable to create database");
			}
			myDbHelper.openDataBase();
			
			MessageDigest md;
			try {
				md = MessageDigest.getInstance("SHA1");
				for (Object object : pkgAppsList) {
					ResolveInfo info = (ResolveInfo) object;
					File file = new File(info.activityInfo.applicationInfo.publicSourceDir);
					ApplicationInfo appInfo = info.activityInfo.applicationInfo;
					Drawable icon = appInfo.loadIcon(getPackageManager());
					String absolutePath = file.getAbsolutePath();
					InputStream is = new FileInputStream(file);
					byte[] dataBytes = new byte[2048];
					try {
						is = new DigestInputStream(is, md);
						while (is.read(dataBytes) != -1);
					} catch (IOException e) {
						e.printStackTrace();
					} finally {
						try {
							is.close();
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
					byte[] digest = md.digest();
					StringBuffer sb = new StringBuffer();
			        for (int i = 0; i < digest.length; i++) {
			          sb.append(Integer.toString((digest[i] & 0xff) + 0x100, 16).substring(1));
			        }
			        String hash = sb.toString();
			        AppUnit appUnit = null;
			        //check in database
					String family = myDbHelper.findHash(hash);
					Log.d("Path", absolutePath);
					if(family != null){
						Log.d("from home", family);
						appUnit = new AppUnit(file.getName(), icon, hash, true, family, absolutePath);
						appList.add(0,appUnit);
					}
					else{
						Log.d("from home", "None");
						appUnit = new AppUnit(file.getName(), icon, hash, false, null, absolutePath);
						appList.add(appUnit);
					}
					
				}
				myDbHelper.close();
			} catch (NoSuchAlgorithmException e) {
				e.printStackTrace();
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			result = 1;
			return result; //success
		}

		@Override
		protected void onPostExecute(Integer result) {
			//communityListTask = null;
			if(result == 1) {
				Toast.makeText(cont, "APKs scanned", Toast.LENGTH_SHORT).show();
				AppListBaseAdapter appListBaseAdapter = new AppListBaseAdapter(cont, appList);
				setListAdapter(appListBaseAdapter);
			}
			else{
				Toast.makeText(cont, "APKs not scanned", Toast.LENGTH_SHORT).show();
			}
			getSupportActionBar();
			setSupportProgressBarIndeterminateVisibility(false);
			scan.setVisible(true);
			
		}
		@Override
		protected void onCancelled() {
			super.onCancelled();
			//communityListTask = null;
		}
	}
}
